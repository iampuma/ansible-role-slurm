---
  - name: install slurm service specific packages
    package: "name={{ item }} state=present"
    with_items: "{{ slurm_service_packages }}"

  - name: print systemctl_slurm_status
    debug: "var=systemctl_slurm_status"
    tags: debug
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"
    changed_when: False

  - name: does the munge.key exist?
    stat: path=/etc/munge/munge.key
    register: mungekeystat
    always_run: True
    ignore_errors: True

  - name: create munge key
    command: /usr/sbin/create-munge-key creates=/etc/munge/munge.key
    register: mungekeygen
    when: mungekeystat is defined and mungekeystat.stat.exists == False

  - name: get munge key for distribution to nodes
    fetch: src=/etc/munge/munge.key
           dest=files/munge.key
           fail_on_missing=yes
           flat=yes

  - name: create slurm_munge_key_nfs_dir
    file: path={{ slurm_munge_key_nfs_dir }} state=directory owner=root group={{ admingroup }} mode=0750
    when: slurm_munge_key_to_nfs

  - name: copy munge.key to slurm_munge_key_nfs_dir too
    copy: src=files/munge.key dest={{ slurm_munge_key_nfs }} mode=0400 owner=munge group=munge
    when: slurm_munge_key_to_nfs

  - name: create build dirs
    file: path="/root/rpmbuild/{{ item }}" state=directory
    with_items:
        - "BUILD"
        - "RPMS"
        - "SOURCES"
        - "SPECS"
        - "SRPMS"
    when: slurm_build == True

  - name: download Slurm source
    get_url: url="http://www.schedmd.com/download/latest/slurm-{{ slurm_version }}.tar.bz2" dest="/root/rpmbuild/SOURCES/slurm-{{ slurm_version }}.tar.bz2"
    when: slurm_build == True

  - name: Extract Slurm source 2
    command: "tar -xjf /root/rpmbuild/SOURCES/slurm-{{ slurm_version}}.tar.bz2 -C /root/rpmbuild/SOURCES/ creates=/root/rpmbuild/SOURCES/slurm-{{ slurm_version }}"
    when: slurm_build == True

  - name: build Slurm
    command: "{{ item }} chdir=/root/rpmbuild/SOURCES/slurm-{{ slurm_version}}/ creates=/root/rpmbuild/RPMS/x86_64/slurm-{{ slurm_version }}-1.el{{major_release}}.x86_64.rpm"
    with_items:
       - "rpmbuild -bb --with lua  slurm.spec"
       #- ./configure
       #- "/usr/bin/make"
       #- "/usr/bin/make install"
    when: slurm_build == True

  - name: get slurm rpms to then distribute them to the nodes
    fetch: src={{ item }}
           dest=roles/slurm_common/files/
           fail_on_missing=yes
           flat=yes
    with_items:
         - "/root/rpmbuild/RPMS/x86_64/slurm-plugins-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-perlapi-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-slurmdb-direct-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sql-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-lua-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-devel-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-pam_slurm-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sjstat-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-slurmdbd-{{ slurm_version }}-1.el6.x86_64.rpm"
        #- "/root/rpmbuild/RPMS/x86_64/slurm-spank-x11-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-torque-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-munge-{{ slurm_version }}-1.el6.x86_64.rpm"
         - "/root/rpmbuild/RPMS/x86_64/slurm-sjobexit-{{ slurm_version }}-1.el6.x86_64.rpm"
    when: slurm_build == True

  - name: add slurm unix group
    group: name=slurm system=no state=present
    register: reg_slurm_unixgroup

  - name: add slurm unix user
    user: name=slurm shell=/sbin/nologin createhome=no system=no append=yes group=slurm state=present
    register: reg_slurm_unixuser

  - name: add slurm log dir
    file: "path={{ slurm_log_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm tmp dir
    file: "path={{ slurmd_tmp_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm state dir
    file: "path={{ slurm_state_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm etc dir
    file: path="/etc/slurm" state=directory owner=root group=root mode=0755

  - name: Update NIS DB
    command: /usr/bin/make -C /var/yp
    when: nis_server and (reg_slurm_unixgroup.changed or reg_slurm_unixuser.changed)

  - name: restart munge
    service: name=munge state=restarted
    when: mungekeygen.changed and mungekeygen is defined

  - name: start and enable munge
    service: name=munge state=started enabled=yes

  - name: Increase net.core.somaxconn for slurmctld
    sysctl: name=net.core.somaxconn
            value={{ slurm_sysctl_core_somaxconn }}
            sysctl_file=/etc/sysctl.d/50-slurm.conf
    when: slurm_manage_sysctl

  - name: Increase net.ipv4.tcp_max_syn_backlog for slurmctld
    sysctl: name=net.ipv4.tcp_max_syn_backlog
            value={{ slurm_sysctl_tcp_max_syn_backlog }}
            sysctl_file=/etc/sysctl.d/50-slurm.conf
    when: slurm_manage_sysctl

  - name: install Slurm ( state=present - not updating )
    package: name={{ item }} state=present
    with_items: "{{ slurm_packages }}"

  - name: add slurm log dir
    file: path={{ slurm_log_dir }} state=directory owner=slurm group=slurm mode=0750

  - name: add slurmd tmp dir
    file: "path={{ slurmd_tmp_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurmstate tmp dir
    file: "path={{ slurm_state_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: sacctmgr show cluster siteName and store in slurm_clusterlist variable
    command: "sacctmgr -n show cluster {{ siteName }}"
    register: slurm_clusterlist
    always_run: yes
    changed_when: False

  - name: add cluster to accounting
    command: "sacctmgr -i add cluster {{ siteName }}"
    when: slurm_clusterlist.stdout.find("{{siteName}}") == -1

  - name: start and enable slurmctld
    service: name={{ slurmctld_service }} state=started enabled=yes
