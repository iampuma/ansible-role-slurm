---
  - name: slurm_mysql_password variable must be set
    assert:
      that: "slurm_mysql_password is defined"

####

  - name: install slurmdbd specific packages
    package: "name={{item}} state=present"
    register: reg_install_slurm_packages
    with_items: "{{ slurmdbd_packages }}"
    when: ansible_os_family == "RedHat"

  - name: start and enable mariadb/mysql
    service: name={{ slurm_sql_service }} state=started enabled=yes
    when: ansible_os_family == "RedHat"

  - name: restart mariadb/mysql after install
    service: name={{ slurm_sql_service }} state=restarted
    when: reg_install_slurm_packages.changed

  - name: wait for mysql in port 3306 to start
    wait_for: port=3306 delay=10 timeout=60

  - name: Set root sql user password
    # If .my.cnf already exists, this will cause an mysql-root-password update.
    # check_implicit_admin means it tries without password first
    mysql_user:
      name: root
      password: "{{ DB_root_password}}"
      check_implicit_admin: true
      host="{{ item }}"
    with_items:
       - "::1"
       - "127.0.0.1"
       - "localhost"
    when: slurm_manage_mysql_security
    
  - name: template .my.cnf
    template:
     src: "client.my.cnf.j2"
     dest: "/root/.my.cnf"
     owner: root
     group: root
     mode: 0600
    when: slurm_manage_mysql_security

  - name: delete anonymous sql server user for localhost
    mysql_user: user="" state=absent
    when: slurm_manage_mysql_security

  - name: remove the mysql test database
    mysql_db: db=test state=absent
    when: slurm_manage_mysql_security

  - name: create slurm acct db
    mysql_db: name=slurm_acct_db state=present
    when: slurm_manage_mysql_security

  - name: create slurm sql user
    mysql_user: 
     name: slurm 
     state: present 
     password: "{{ slurm_mysql_password }}"
    register: mysqlslurmuser
    ignore_errors: yes
    tags: debug

  - name: print mysqlslurmuser
    debug: var=mysqlslurmuser verbosity=1
    tags: debug
    changed_when: False

  - name: ensure slurm sql user has a password and privileges if it does not exist or if it was just added
    mysql_user: 
     name: slurm
     password: "{{ slurm_mysql_passwordÂ }}"
     priv: "slurm_acct_db.*:ALL"
     state: present 
     update_password: always
    when: mysqlslurmuser|failed or mysqlslurmuser|changed

  - name: template in slurmdbd.conf
    template: 
     src: slurmdbd.conf.j2 
     dest: /etc/slurm/slurmdbd.conf 
     owner: root 
     mode: 0640 
     backup: yes
    notify:
      - restart slurmdbd

  - name: template in dump-all-databases.sh
    template: src=dump-all-databases.sh.j2 dest=/usr/local/sbin/dump-all-databases.sh owner=root mode=0750 backup=no
